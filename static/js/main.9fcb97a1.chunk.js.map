{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["getting","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","req","console","log","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","request","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchSciFi","fetchWestern","fetchAnimation","fetchDocumentaries","Banner","str","n","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_title","overview","slice","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fcb97a1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst getting = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default getting;","import React, { useState, useEffect } from \"react\";\r\nimport getting from \"./axios\";\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original/\";\r\nfunction Row({ title, fetchUrl, isLargeRow}) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const req = await getting.get(fetchUrl);\r\n      console.log(req.data.results);\r\n      setMovies(req.data.results);\r\n      return req;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      // https://developers.google.com/youtube/player_parameters\r\n      autoplay: 1,\r\n    },\r\n    }\r\n\r\n    const handleClick = (movie)=>{\r\n      if (trailerUrl){\r\n        setTrailerUrl('');\r\n      }else{\r\n        movieTrailer(movie.name || \"\")\r\n        .then((url) => {\r\n        const urlParams = new URLSearchParams(new URL(url).search)\r\n        setTrailerUrl(urlParams.get(\"v\"))\r\n        })\r\n        .catch((error)=> console.log(error))\r\n      \r\n      }\r\n    }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"rowPosters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n          key={movie.id}\r\n          onClick={()=>handleClick(movie)}\r\n            className={`rowPoster ${isLargeRow && \"rowPosterLarge\"}`}\r\n            src={`${baseUrl}${isLargeRow ? movie.poster_path: movie.backdrop_path}`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY= \"95eaea614439420419fd4c74d62cf296\";\r\nconst request= {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchMystery: `/discover/movie?api_key=${API_KEY}&with_genres=9648`,\r\n    fetchSciFi: `/discover/movie?api_key=${API_KEY}&with_genres=878`,\r\n    fetchWestern: `/discover/movie?api_key=${API_KEY}&with_genres=37`,\r\n    fetchAnimation: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default request;","import React, { useEffect, useState } from \"react\";\r\nimport getting from \"./axios\";\r\nimport request from \"./request\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const req = await getting.get(request.fetchTrending);\r\n      console.log(req.data.results);\r\n      setMovies(\r\n        req.data.results[\r\n          Math.floor(Math.random() * req.data.results.length - 1)\r\n        ]\r\n      );\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  console.log(movie);\r\n\r\n  function trunc(str, n){\r\n    return str?.length > n ? str.slice(0, n) + \"...\" : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center center\",\r\n      }}\r\n    >\r\n      <div className=\"bannerContents\">\r\n        <h1 className=\"bannerTitle\">{movie?.title || movie?.name || movie?.original_title}</h1>\r\n        <div className=\"bannerButtons\">\r\n          <button className=\"bannerButton\">Play</button>\r\n          <button className=\"bannerButton\">My List</button>\r\n        </div>\r\n        <h1 className=\"bannerDescription\">{trunc(movie?.overview, 200)}</h1>\r\n      </div>\r\n\r\n      <div className=\"bannerFade\"></div>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React,{useState, useEffect} from 'react'\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n    const[show, handleShow] = useState(false);\r\nuseEffect(() => {\r\n    window.addEventListener(\"scroll\",()=>{\r\n        if (window.scrollY > 100){\r\n           handleShow(true);\r\n        }else handleShow(false);\r\n    })\r\n    return () => {\r\n        window.removeEventListener(\"scroll\");\r\n    }\r\n}, [])\r\n\r\n\r\n    return (\r\n        <div className={`nav ${show && \"navBlack\"}`}>\r\n            <img\r\n            className=\"navLogo\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\" alt=\"netflix Logo\"\r\n            />\r\n            <img\r\n            className=\"navAvatar\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"netflix Avatar\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import './App.css';\nimport Row from './Row';\nimport request from './request';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n<Nav />\n<Banner/>\n\n      <Row title = \"NETFLIX ORIGINALS\" fetchUrl={request.fetchNetflixOriginals} isLargeRow/>\n      <Row title = \"Trending now\" fetchUrl={request.fetchTrending}/>\n      <Row title = \"Top Rated\" fetchUrl={request.fetchTopRated}/>\n      <Row title = \"Action Movies\" fetchUrl={request.fetchActionMovies}/>\n      <Row title = \"Comedy Movies\" fetchUrl={request.fetchComedyMovies}/>\n      <Row title = \"Horror Movies\" fetchUrl={request.fetchHorrorMovies}/>\n      <Row title = \"Romance Movies\" fetchUrl={request.fetchRomanceMovies}/>\n      <Row title = \"Mystery\" fetchUrl={request.fetchMystery}/>\n      <Row title = \"Sci Fi\" fetchUrl={request.fetchSciFi}/>\n      <Row title = \"Western\" fetchUrl={request.fetchWestern}/>\n      <Row title = \"Animation\" fetchUrl={request.fetchAnimation}/>\n      <Row title = \"Documentaries\" fetchUrl={request.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}